// Code generated by MockGen. DO NOT EDIT.
// Source: postgres.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	postgres "github.com/lugondev/tx-builder/src/infra/postgres"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockClient is a mock of Client interface
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// ModelContext mocks base method
func (m *MockClient) ModelContext(ctx context.Context, models ...interface{}) postgres.Query {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range models {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ModelContext", varargs...)
	ret0, _ := ret[0].(postgres.Query)
	return ret0
}

// ModelContext indicates an expected call of ModelContext
func (mr *MockClientMockRecorder) ModelContext(ctx interface{}, models ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, models...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ModelContext", reflect.TypeOf((*MockClient)(nil).ModelContext), varargs...)
}

// QueryOneContext mocks base method
func (m *MockClient) QueryOneContext(ctx context.Context, model, query interface{}, params ...interface{}) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, model, query}
	for _, a := range params {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "QueryOneContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// QueryOneContext indicates an expected call of QueryOneContext
func (mr *MockClientMockRecorder) QueryOneContext(ctx, model, query interface{}, params ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, model, query}, params...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryOneContext", reflect.TypeOf((*MockClient)(nil).QueryOneContext), varargs...)
}

// RunInTransaction mocks base method
func (m *MockClient) RunInTransaction(ctx context.Context, persist func(postgres.Client) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RunInTransaction", ctx, persist)
	ret0, _ := ret[0].(error)
	return ret0
}

// RunInTransaction indicates an expected call of RunInTransaction
func (mr *MockClientMockRecorder) RunInTransaction(ctx, persist interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunInTransaction", reflect.TypeOf((*MockClient)(nil).RunInTransaction), ctx, persist)
}

// Exec mocks base method
func (m *MockClient) Exec(query interface{}, params ...interface{}) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{query}
	for _, a := range params {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Exec", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Exec indicates an expected call of Exec
func (mr *MockClientMockRecorder) Exec(query interface{}, params ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{query}, params...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exec", reflect.TypeOf((*MockClient)(nil).Exec), varargs...)
}

// Close mocks base method
func (m *MockClient) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close
func (mr *MockClientMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockClient)(nil).Close))
}

// MockQuery is a mock of Query interface
type MockQuery struct {
	ctrl     *gomock.Controller
	recorder *MockQueryMockRecorder
}

// MockQueryMockRecorder is the mock recorder for MockQuery
type MockQueryMockRecorder struct {
	mock *MockQuery
}

// NewMockQuery creates a new mock instance
func NewMockQuery(ctrl *gomock.Controller) *MockQuery {
	mock := &MockQuery{ctrl: ctrl}
	mock.recorder = &MockQueryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockQuery) EXPECT() *MockQueryMockRecorder {
	return m.recorder
}

// WherePK mocks base method
func (m *MockQuery) WherePK() postgres.Query {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WherePK")
	ret0, _ := ret[0].(postgres.Query)
	return ret0
}

// WherePK indicates an expected call of WherePK
func (mr *MockQueryMockRecorder) WherePK() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WherePK", reflect.TypeOf((*MockQuery)(nil).WherePK))
}

// Where mocks base method
func (m *MockQuery) Where(condition string, params ...interface{}) postgres.Query {
	m.ctrl.T.Helper()
	varargs := []interface{}{condition}
	for _, a := range params {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Where", varargs...)
	ret0, _ := ret[0].(postgres.Query)
	return ret0
}

// Where indicates an expected call of Where
func (mr *MockQueryMockRecorder) Where(condition interface{}, params ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{condition}, params...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Where", reflect.TypeOf((*MockQuery)(nil).Where), varargs...)
}

// WhereAllowedOwner mocks base method
func (m *MockQuery) WhereAllowedOwner(ownerIDLabel, ownerID string) postgres.Query {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WhereAllowedOwner", ownerIDLabel, ownerID)
	ret0, _ := ret[0].(postgres.Query)
	return ret0
}

// WhereAllowedOwner indicates an expected call of WhereAllowedOwner
func (mr *MockQueryMockRecorder) WhereAllowedOwner(ownerIDLabel, ownerID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WhereAllowedOwner", reflect.TypeOf((*MockQuery)(nil).WhereAllowedOwner), ownerIDLabel, ownerID)
}

// WhereAllowedTenants mocks base method
func (m *MockQuery) WhereAllowedTenants(tenantIDLabel string, tenants []string) postgres.Query {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WhereAllowedTenants", tenantIDLabel, tenants)
	ret0, _ := ret[0].(postgres.Query)
	return ret0
}

// WhereAllowedTenants indicates an expected call of WhereAllowedTenants
func (mr *MockQueryMockRecorder) WhereAllowedTenants(tenantIDLabel, tenants interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WhereAllowedTenants", reflect.TypeOf((*MockQuery)(nil).WhereAllowedTenants), tenantIDLabel, tenants)
}

// Order mocks base method
func (m *MockQuery) Order(order string) postgres.Query {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Order", order)
	ret0, _ := ret[0].(postgres.Query)
	return ret0
}

// Order indicates an expected call of Order
func (mr *MockQueryMockRecorder) Order(order interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Order", reflect.TypeOf((*MockQuery)(nil).Order), order)
}

// OrderExpr mocks base method
func (m *MockQuery) OrderExpr(order string, params ...interface{}) postgres.Query {
	m.ctrl.T.Helper()
	varargs := []interface{}{order}
	for _, a := range params {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "OrderExpr", varargs...)
	ret0, _ := ret[0].(postgres.Query)
	return ret0
}

// OrderExpr indicates an expected call of OrderExpr
func (mr *MockQueryMockRecorder) OrderExpr(order interface{}, params ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{order}, params...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OrderExpr", reflect.TypeOf((*MockQuery)(nil).OrderExpr), varargs...)
}

// Relation mocks base method
func (m *MockQuery) Relation(name string, apply ...func(postgres.Query) (postgres.Query, error)) postgres.Query {
	m.ctrl.T.Helper()
	varargs := []interface{}{name}
	for _, a := range apply {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Relation", varargs...)
	ret0, _ := ret[0].(postgres.Query)
	return ret0
}

// Relation indicates an expected call of Relation
func (mr *MockQueryMockRecorder) Relation(name interface{}, apply ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{name}, apply...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Relation", reflect.TypeOf((*MockQuery)(nil).Relation), varargs...)
}

// Column mocks base method
func (m *MockQuery) Column(columns ...string) postgres.Query {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range columns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Column", varargs...)
	ret0, _ := ret[0].(postgres.Query)
	return ret0
}

// Column indicates an expected call of Column
func (mr *MockQueryMockRecorder) Column(columns ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Column", reflect.TypeOf((*MockQuery)(nil).Column), columns...)
}

// ColumnExpr mocks base method
func (m *MockQuery) ColumnExpr(expr string, params ...interface{}) postgres.Query {
	m.ctrl.T.Helper()
	varargs := []interface{}{expr}
	for _, a := range params {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ColumnExpr", varargs...)
	ret0, _ := ret[0].(postgres.Query)
	return ret0
}

// ColumnExpr indicates an expected call of ColumnExpr
func (mr *MockQueryMockRecorder) ColumnExpr(expr interface{}, params ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{expr}, params...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ColumnExpr", reflect.TypeOf((*MockQuery)(nil).ColumnExpr), varargs...)
}

// Join mocks base method
func (m *MockQuery) Join(join string, params ...interface{}) postgres.Query {
	m.ctrl.T.Helper()
	varargs := []interface{}{join}
	for _, a := range params {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Join", varargs...)
	ret0, _ := ret[0].(postgres.Query)
	return ret0
}

// Join indicates an expected call of Join
func (mr *MockQueryMockRecorder) Join(join interface{}, params ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{join}, params...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Join", reflect.TypeOf((*MockQuery)(nil).Join), varargs...)
}

// OnConflict mocks base method
func (m *MockQuery) OnConflict(s string, params ...interface{}) postgres.Query {
	m.ctrl.T.Helper()
	varargs := []interface{}{s}
	for _, a := range params {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "OnConflict", varargs...)
	ret0, _ := ret[0].(postgres.Query)
	return ret0
}

// OnConflict indicates an expected call of OnConflict
func (mr *MockQueryMockRecorder) OnConflict(s interface{}, params ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{s}, params...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnConflict", reflect.TypeOf((*MockQuery)(nil).OnConflict), varargs...)
}

// Set mocks base method
func (m *MockQuery) Set(set string, params ...interface{}) postgres.Query {
	m.ctrl.T.Helper()
	varargs := []interface{}{set}
	for _, a := range params {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Set", varargs...)
	ret0, _ := ret[0].(postgres.Query)
	return ret0
}

// Set indicates an expected call of Set
func (mr *MockQueryMockRecorder) Set(set interface{}, params ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{set}, params...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockQuery)(nil).Set), varargs...)
}

// Returning mocks base method
func (m *MockQuery) Returning(s string, params ...interface{}) postgres.Query {
	m.ctrl.T.Helper()
	varargs := []interface{}{s}
	for _, a := range params {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Returning", varargs...)
	ret0, _ := ret[0].(postgres.Query)
	return ret0
}

// Returning indicates an expected call of Returning
func (mr *MockQueryMockRecorder) Returning(s interface{}, params ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{s}, params...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Returning", reflect.TypeOf((*MockQuery)(nil).Returning), varargs...)
}

// For mocks base method
func (m *MockQuery) For(s string, params ...interface{}) postgres.Query {
	m.ctrl.T.Helper()
	varargs := []interface{}{s}
	for _, a := range params {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "For", varargs...)
	ret0, _ := ret[0].(postgres.Query)
	return ret0
}

// For indicates an expected call of For
func (mr *MockQueryMockRecorder) For(s interface{}, params ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{s}, params...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "For", reflect.TypeOf((*MockQuery)(nil).For), varargs...)
}

// Insert mocks base method
func (m *MockQuery) Insert() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert")
	ret0, _ := ret[0].(error)
	return ret0
}

// Insert indicates an expected call of Insert
func (mr *MockQueryMockRecorder) Insert() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockQuery)(nil).Insert))
}

// Update mocks base method
func (m *MockQuery) Update() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update")
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update
func (mr *MockQueryMockRecorder) Update() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockQuery)(nil).Update))
}

// UpdateNotZero mocks base method
func (m *MockQuery) UpdateNotZero() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateNotZero")
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateNotZero indicates an expected call of UpdateNotZero
func (mr *MockQueryMockRecorder) UpdateNotZero() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateNotZero", reflect.TypeOf((*MockQuery)(nil).UpdateNotZero))
}

// Select mocks base method
func (m *MockQuery) Select() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Select")
	ret0, _ := ret[0].(error)
	return ret0
}

// Select indicates an expected call of Select
func (mr *MockQueryMockRecorder) Select() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Select", reflect.TypeOf((*MockQuery)(nil).Select))
}

// SelectOne mocks base method
func (m *MockQuery) SelectOne() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectOne")
	ret0, _ := ret[0].(error)
	return ret0
}

// SelectOne indicates an expected call of SelectOne
func (mr *MockQueryMockRecorder) SelectOne() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectOne", reflect.TypeOf((*MockQuery)(nil).SelectOne))
}

// SelectOrInsert mocks base method
func (m *MockQuery) SelectOrInsert() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectOrInsert")
	ret0, _ := ret[0].(error)
	return ret0
}

// SelectOrInsert indicates an expected call of SelectOrInsert
func (mr *MockQueryMockRecorder) SelectOrInsert() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectOrInsert", reflect.TypeOf((*MockQuery)(nil).SelectOrInsert))
}

// SelectColumn mocks base method
func (m *MockQuery) SelectColumn(result interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectColumn", result)
	ret0, _ := ret[0].(error)
	return ret0
}

// SelectColumn indicates an expected call of SelectColumn
func (mr *MockQueryMockRecorder) SelectColumn(result interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectColumn", reflect.TypeOf((*MockQuery)(nil).SelectColumn), result)
}

// Delete mocks base method
func (m *MockQuery) Delete() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete")
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *MockQueryMockRecorder) Delete() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockQuery)(nil).Delete))
}
